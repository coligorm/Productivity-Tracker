// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251019080758_UpdateSeedDataForCategoryModel")]
    partial class UpdateSeedDataForCategoryModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Mental tasks that exercise your Mind",
                            TotalScore = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Physical tasks that exercise your Body",
                            TotalScore = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Express yourself with tasks that grow your Soul",
                            TotalScore = 0,
                            Type = 2
                        });
                });

            modelBuilder.Entity("backend.Models.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Complete Sudoku",
                            Score = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Programming",
                            Score = 3
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "Do 10 pushups",
                            Score = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Run",
                            Score = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Name = "Brazilian Jiu-Jitsu",
                            Score = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Name = "Read",
                            Score = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Name = "Play bass",
                            Score = 2
                        });
                });

            modelBuilder.Entity("backend.Models.TaskModel", b =>
                {
                    b.HasOne("backend.Models.CategoryModel", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("backend.Models.CategoryModel", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
